class Solution {
    public int reversePairs(int[] nums) {
       return mergeSort(nums,0,nums.length-1);
    }
    public int mergeSort(int []arr,int low,int high){
        int cnt =0;
        // base case for recursion
        if(low>= high) return cnt;
        int mid = (low+high)/2;

        cnt+= mergeSort(arr,low,mid);
        cnt+= mergeSort(arr,mid+1,high);
        cnt += count(arr,low,mid,high);
        merge(arr,low,mid,high);

        return cnt;
    }
    public int count(int []arr,int low,int mid,int high){
        int right = mid+1;
        int cnt =0;
        for(int i=low;i<=mid;i++){
            while(right<=high && (long)arr[i]>2*(long)arr[right]){
                right++;
            }
            cnt += (right-(mid+1));
        }
        return cnt;
    }
    private void merge(int []arr,int low,int mid,int high){
        ArrayList<Integer> temp = new ArrayList<>();
        int l = low;
        int r = mid+1;
        while(l<=mid && r<=high){
            if(arr[l]<=arr[r]){
                temp.add(arr[l]);
                l++;
            }
            else{
                temp.add(arr[r]);
                r++;
            }
        }
        while(l<=mid){
            temp.add(arr[l]);
            l++;
        }
        while(r<=high){
            temp.add(arr[r]);
            r++;
        }
        for(int i=low;i<=high;i++){
            arr[i]=temp.get(i-low);
        }
    }
}