class Solution {
    public boolean validate(char [][] board,int row,int col){
        int duprow =row;
        int dupcol=col;
        while(row>=0 && col>=0){
            if(board[row][col]=='Q') return false;
            row--;
            col--;
        }
        row=duprow;
        col=dupcol;
        while(col>=0){
            if(board[row][col]=='Q') return false;
            col--;
        }
        col=dupcol;
        while(col>=0 && row<board.length){
            if(board[row][col]=='Q') return false;
            col--;
            row++;
        }
        return true;
    }
    public List<String> construct(char [][] board){
        List<String> ds= new ArrayList<>();
        for(int i=0;i<board.length;i++){
            String s = new String(board[i]);
            ds.add(s);
        }
        return ds;
    }
    public void bfs(char [][] board,List<List<String>> ans,int col){
        if(col == board.length){
            ans.add(construct(board));
            return;
        }
        for(int row=0;row<board.length;row++){
            if(validate(board,row,col)){
                board[row][col]='Q';
                bfs(board,ans,col+1);
                board[row][col]='.';
            }
        }
    }
    public List<List<String>> solveNQueens(int n) {
        char [][] board = new char[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++)
                board[i][j]='.';
        }
        List<List<String>> ans = new ArrayList<>();
        bfs(board,ans,0);
        return ans;
    }
}